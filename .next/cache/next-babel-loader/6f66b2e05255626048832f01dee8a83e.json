{"ast":null,"code":"var _jsxFileName = \"/Users/maya2/Desktop/Dev/Sites/Armazem-fit-store/site/afs-next-app/components/lojas/BuscaGeo.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport Button from '../ui/buttons/ButtonSucesso';\nimport Icon from '../ui/icons/Icon';\nimport CircleLoading from '../ui/loadings/Circle';\nconst GEO_KEY = 'AIzaSyDPo1rgn1qidv801MOtTL6Qdf_zqpKhCiM';\nconst ButtonGeo = styled(Button)`\n  font-size: 1.5rem;\n  padding: 0.5rem;\n  align-items: center;\n  svg {\n    margin-right: 0.5rem;\n  }\n`; // navigator.geolocation || \"geolocation\" in navigator\n\nconst BuscaGeo = ({\n  setCidade,\n  carregado,\n  setErroCidadeGeo\n}) => {\n  const {\n    0: status,\n    1: setStatus\n  } = useState('idle');\n\n  const transformaCoordenadas = async ({\n    latitude,\n    longitude\n  }) => {\n    setStatus('convertendo');\n\n    try {\n      if (latitude && longitude) {\n        const {\n          results\n        } = await (await fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=administrative_area_level_2&key=${GEO_KEY}`)).json();\n\n        if (results && results.length) {\n          // o primeiro resultado eh o mais certeiro\n          const [{\n            formatted_address\n          }] = results; // como o result_type foi especificado, o formatted_address comeca com cidade\n\n          const [cidade] = formatted_address.split('-'); // enviando cidade para cima\n\n          setCidade(cidade.trim());\n        }\n      }\n\n      setStatus('obtido');\n    } catch (error) {\n      setErroCidadeGeo(true);\n    }\n  };\n\n  const pegarLocalizacao = async () => {\n    if ('geolocation' in navigator) {\n      setStatus('geolocalizando');\n\n      try {\n        navigator.geolocation.getCurrentPosition(position => {\n          if (position && position.coords) {\n            transformaCoordenadas(position.coords);\n          }\n        });\n      } catch (error) {\n        setErroCidadeGeo(true);\n      }\n    } else {\n      setErroCidadeGeo(true);\n    }\n  };\n\n  return __jsx(ButtonGeo, {\n    disabled: !carregado,\n    onClick: pegarLocalizacao,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, status === 'geolocalizando' || status === 'convertendo' ? __jsx(CircleLoading, {\n    tamanho: \"1.8\",\n    cor: \"#fff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }) : __jsx(Icon, {\n    tipo: \"svg\",\n    icon: \"location\",\n    tamanho: \"1.8rem\",\n    cor: \"#fff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }), carregado ? 'Usar minha localização' : 'Carregando...');\n};\n\nBuscaGeo.propTypes = {\n  setCidade: PropTypes.func.isRequired,\n  setErroCidadeGeo: PropTypes.func.isRequired,\n  carregado: PropTypes.bool.isRequired\n};\nexport default BuscaGeo;","map":{"version":3,"sources":["/Users/maya2/Desktop/Dev/Sites/Armazem-fit-store/site/afs-next-app/components/lojas/BuscaGeo.jsx"],"names":["React","useState","styled","PropTypes","Button","Icon","CircleLoading","GEO_KEY","ButtonGeo","BuscaGeo","setCidade","carregado","setErroCidadeGeo","status","setStatus","transformaCoordenadas","latitude","longitude","results","fetch","json","length","formatted_address","cidade","split","trim","error","pegarLocalizacao","navigator","geolocation","getCurrentPosition","position","coords","propTypes","func","isRequired","bool"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport Button from '../ui/buttons/ButtonSucesso';\nimport Icon from '../ui/icons/Icon';\nimport CircleLoading from '../ui/loadings/Circle';\n\nconst GEO_KEY = 'AIzaSyDPo1rgn1qidv801MOtTL6Qdf_zqpKhCiM';\n\nconst ButtonGeo = styled(Button)`\n  font-size: 1.5rem;\n  padding: 0.5rem;\n  align-items: center;\n  svg {\n    margin-right: 0.5rem;\n  }\n`;\n\n// navigator.geolocation || \"geolocation\" in navigator\n\nconst BuscaGeo = ({ setCidade, carregado, setErroCidadeGeo }) => {\n  const [status, setStatus] = useState('idle');\n\n  const transformaCoordenadas = async ({ latitude, longitude }) => {\n    setStatus('convertendo');\n    try {\n      if (latitude && longitude) {\n        const { results } = await (await fetch(\n          `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=administrative_area_level_2&key=${GEO_KEY}`,\n        )).json();\n        if (results && results.length) {\n          // o primeiro resultado eh o mais certeiro\n          const [{ formatted_address }] = results;\n          // como o result_type foi especificado, o formatted_address comeca com cidade\n          const [cidade] = formatted_address.split('-');\n          // enviando cidade para cima\n          setCidade(cidade.trim());\n        }\n      }\n      setStatus('obtido');\n    } catch (error) {\n      setErroCidadeGeo(true);\n    }\n  };\n\n  const pegarLocalizacao = async () => {\n    if ('geolocation' in navigator) {\n      setStatus('geolocalizando');\n      try {\n        navigator.geolocation.getCurrentPosition((position) => {\n          if (position && position.coords) {\n            transformaCoordenadas(position.coords);\n          }\n        });\n      } catch (error) {\n        setErroCidadeGeo(true);\n      }\n    } else {\n      setErroCidadeGeo(true);\n    }\n  };\n\n  return (\n    <ButtonGeo disabled={!carregado} onClick={pegarLocalizacao}>\n      {status === 'geolocalizando' || status === 'convertendo' ? (\n        <CircleLoading tamanho=\"1.8\" cor=\"#fff\" />\n      ) : (\n        <Icon tipo=\"svg\" icon=\"location\" tamanho=\"1.8rem\" cor=\"#fff\" />\n      )}\n      {carregado ? 'Usar minha localização' : 'Carregando...'}\n    </ButtonGeo>\n  );\n};\n\nBuscaGeo.propTypes = {\n  setCidade: PropTypes.func.isRequired,\n  setErroCidadeGeo: PropTypes.func.isRequired,\n  carregado: PropTypes.bool.isRequired,\n};\n\nexport default BuscaGeo;\n"]},"metadata":{},"sourceType":"module"}