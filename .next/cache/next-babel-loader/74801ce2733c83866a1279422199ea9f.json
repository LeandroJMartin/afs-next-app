{"ast":null,"code":"var _jsxFileName = \"/Users/maya2/Desktop/Dev/Sites/Armazem-fit-store/site/afs-next-app/components/lojas/BuscaCampos.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport Router from \"next/router\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport BuscaGeo from \"./BuscaGeo\";\nimport { getAbsoluteUrl } from \"../../helpers/url\";\nimport Select from \"../formulario/Select\";\nimport ListaLojas from \"./ListaLojas\";\nconst BuscaWrapper = styled.div`\n  .erro-geo {\n    text-align: center;\n    margin: 0.5rem auto;\n    color: ${props => props.theme.client.colors.laranja};\n  }\n`;\nconst Inputs = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(14rem, 20rem));\n  align-items: center;\n  justify-content: center;\n  grid-gap: 1.5rem;\n  padding: 1rem 1rem;\n  .select-input {\n    background: #eaeaea;\n    width: 14rem;\n    border-radius: 5rem;\n  }\n`;\nconst Resultados = styled.ul``;\n\nconst compilaUfs = lojas => lojas ? lojas.reduce((total, {\n  endereco\n}) => {\n  if (endereco && !total.includes(endereco.uf)) {\n    return [...total, endereco.uf];\n  }\n\n  return total;\n}, []).sort((a, b) => a > b ? 1 : -1) : [];\n\nconst compilaCidades = lojas => lojas ? lojas.reduce((total, {\n  endereco\n}) => {\n  if (endereco && !total.includes(endereco.cidade)) {\n    return [...total, endereco.cidade];\n  }\n\n  return total;\n}, []).sort((a, b) => a > b ? 1 : -1) : [];\n\nconst lojasPorUf = (lojas, uf) => uf ? lojas.filter(({\n  endereco\n}) => endereco && endereco.uf === uf) : [];\n\nconst cidadesPorUf = (lojas, uf) => uf ? lojasPorUf(lojas, uf).reduce((total, {\n  endereco\n}) => {\n  if (endereco && !total.includes(endereco.cidade)) {\n    return [...total, endereco.cidade];\n  }\n\n  return total;\n}, []).sort((a, b) => a > b ? 1 : -1) : [];\n\nconst lojasPorCidade = (lojas, cidade) => cidade ? lojas.filter(({\n  endereco\n}) => endereco && endereco.cidade === cidade) : [];\n\nconst BuscaCampos = ({\n  modo\n}) => {\n  const {\n    0: lojas,\n    1: setLojas\n  } = useState([]);\n  const {\n    0: ufEscolhido,\n    1: setUfEscolhido\n  } = useState(\"\");\n  const {\n    0: cidadeEscolhida,\n    1: setCidadeEscolhida\n  } = useState(\"\");\n  const {\n    0: erroCidadeGeo,\n    1: setErroCidadeGeo\n  } = useState(false);\n\n  const buscaLojas = async () => {\n    const {\n      lojas: lojasEncontradas\n    } = await (await fetch(`${getAbsoluteUrl(\"front\")}/api/lojas`)).json(); // salva as loja\n\n    setLojas(lojasEncontradas);\n  }; // carregando todas as lojas\n\n\n  useEffect(() => {\n    buscaLojas();\n  }, [\"once\"]);\n\n  const handleEstado = ({\n    currentTarget: {\n      value\n    }\n  }) => {\n    setUfEscolhido(value);\n    setCidadeEscolhida(\"\");\n  };\n\n  const handleCidade = ({\n    currentTarget: {\n      value\n    }\n  }) => {\n    setCidadeEscolhida(value);\n  };\n\n  const handleCidadeGeo = cidadeGeo => {\n    const cidades = compilaCidades(lojas);\n\n    if (cidades.includes(cidadeGeo)) {\n      setCidadeEscolhida(cidadeGeo);\n    } else {\n      setErroCidadeGeo(true);\n    }\n  };\n\n  const ufs = compilaUfs(lojas);\n  const cidades = cidadesPorUf(lojas, ufEscolhido);\n  const lojasDisponiveis = lojasPorCidade(lojas, cidadeEscolhida); // se houver somente uma loja disponivel, ja faz o redir\n\n  if (lojasDisponiveis && lojasDisponiveis.length === 1 && modo !== \"balcao\") {\n    const [{\n      path\n    }] = lojasDisponiveis;\n    Router.push(`/${path}`);\n  }\n\n  return __jsx(BuscaWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, __jsx(Inputs, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, __jsx(Select, {\n    valores: ufs,\n    placeholder: \"Estado\",\n    handleInput: handleEstado,\n    valor: ufEscolhido,\n    nome: \"uf\",\n    carregando: !ufs.length,\n    className: \"select-input--tiny\",\n    valido: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }), __jsx(Select, {\n    valores: cidades,\n    placeholder: \"Cidade\",\n    handleInput: handleCidade,\n    valor: cidadeEscolhida,\n    nome: \"cidade\",\n    carregando: !ufs.length,\n    className: \"select-input--tiny\",\n    valido: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }), __jsx(BuscaGeo, {\n    erroCidadeGeo: erroCidadeGeo,\n    setCidade: handleCidadeGeo,\n    carregado: !!ufs.length,\n    setErroCidadeGeo: setErroCidadeGeo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  })), __jsx(Resultados, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, !!erroCidadeGeo && __jsx(\"p\", {\n    className: \"erro-geo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }, \"Ops! Algo deu errado. Por favor, busque usando os campos acima.\"), !!lojasDisponiveis.length && __jsx(ListaLojas, {\n    modo: modo,\n    lojasLinks: lojasDisponiveis,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  })));\n};\n\nBuscaCampos.propTypes = {\n  modo: PropTypes.oneOf([\"balcao\", \"hotsite\"])\n};\nBuscaCampos.defaultProps = {\n  modo: \"hotsite\"\n};\nexport default BuscaCampos;","map":{"version":3,"sources":["/Users/maya2/Desktop/Dev/Sites/Armazem-fit-store/site/afs-next-app/components/lojas/BuscaCampos.jsx"],"names":["useState","useEffect","Router","PropTypes","styled","BuscaGeo","getAbsoluteUrl","Select","ListaLojas","BuscaWrapper","div","props","theme","client","colors","laranja","Inputs","Resultados","ul","compilaUfs","lojas","reduce","total","endereco","includes","uf","sort","a","b","compilaCidades","cidade","lojasPorUf","filter","cidadesPorUf","lojasPorCidade","BuscaCampos","modo","setLojas","ufEscolhido","setUfEscolhido","cidadeEscolhida","setCidadeEscolhida","erroCidadeGeo","setErroCidadeGeo","buscaLojas","lojasEncontradas","fetch","json","handleEstado","currentTarget","value","handleCidade","handleCidadeGeo","cidadeGeo","cidades","ufs","lojasDisponiveis","length","path","push","propTypes","oneOf","defaultProps"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,SAASC,cAAT,QAA+B,mBAA/B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,MAAMC,YAAY,GAAGL,MAAM,CAACM,GAAI;AAChC;AACA;AACA;AACA,aAAaC,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,MAAZ,CAAmBC,MAAnB,CAA0BC,OAAQ;AACxD;AACA,CANA;AAQA,MAAMC,MAAM,GAAGZ,MAAM,CAACM,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZA;AAcA,MAAMO,UAAU,GAAGb,MAAM,CAACc,EAAG,EAA7B;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IACtBA,KAAK,GACDA,KAAK,CACFC,MADH,CACU,CAACC,KAAD,EAAQ;AAAEC,EAAAA;AAAF,CAAR,KAAyB;AAC/B,MAAIA,QAAQ,IAAI,CAACD,KAAK,CAACE,QAAN,CAAeD,QAAQ,CAACE,EAAxB,CAAjB,EAA8C;AAC5C,WAAO,CAAC,GAAGH,KAAJ,EAAWC,QAAQ,CAACE,EAApB,CAAP;AACD;;AACD,SAAOH,KAAP;AACD,CANH,EAMK,EANL,EAOGI,IAPH,CAOQ,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAY,CAAC,CAPhC,CADC,GASD,EAVN;;AAYA,MAAMC,cAAc,GAAGT,KAAK,IAC1BA,KAAK,GACDA,KAAK,CACFC,MADH,CACU,CAACC,KAAD,EAAQ;AAAEC,EAAAA;AAAF,CAAR,KAAyB;AAC/B,MAAIA,QAAQ,IAAI,CAACD,KAAK,CAACE,QAAN,CAAeD,QAAQ,CAACO,MAAxB,CAAjB,EAAkD;AAChD,WAAO,CAAC,GAAGR,KAAJ,EAAWC,QAAQ,CAACO,MAApB,CAAP;AACD;;AACD,SAAOR,KAAP;AACD,CANH,EAMK,EANL,EAOGI,IAPH,CAOQ,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAY,CAAC,CAPhC,CADC,GASD,EAVN;;AAYA,MAAMG,UAAU,GAAG,CAACX,KAAD,EAAQK,EAAR,KACjBA,EAAE,GAAGL,KAAK,CAACY,MAAN,CAAa,CAAC;AAAET,EAAAA;AAAF,CAAD,KAAkBA,QAAQ,IAAIA,QAAQ,CAACE,EAAT,KAAgBA,EAA3D,CAAH,GAAoE,EADxE;;AAGA,MAAMQ,YAAY,GAAG,CAACb,KAAD,EAAQK,EAAR,KACnBA,EAAE,GACEM,UAAU,CAACX,KAAD,EAAQK,EAAR,CAAV,CACGJ,MADH,CACU,CAACC,KAAD,EAAQ;AAAEC,EAAAA;AAAF,CAAR,KAAyB;AAC/B,MAAIA,QAAQ,IAAI,CAACD,KAAK,CAACE,QAAN,CAAeD,QAAQ,CAACO,MAAxB,CAAjB,EAAkD;AAChD,WAAO,CAAC,GAAGR,KAAJ,EAAWC,QAAQ,CAACO,MAApB,CAAP;AACD;;AACD,SAAOR,KAAP;AACD,CANH,EAMK,EANL,EAOGI,IAPH,CAOQ,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAY,CAAC,CAPhC,CADF,GASE,EAVN;;AAYA,MAAMM,cAAc,GAAG,CAACd,KAAD,EAAQU,MAAR,KACrBA,MAAM,GACFV,KAAK,CAACY,MAAN,CAAa,CAAC;AAAET,EAAAA;AAAF,CAAD,KAAkBA,QAAQ,IAAIA,QAAQ,CAACO,MAAT,KAAoBA,MAA/D,CADE,GAEF,EAHN;;AAKA,MAAMK,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAChC,QAAM;AAAA,OAAChB,KAAD;AAAA,OAAQiB;AAAR,MAAoBrC,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACsC,WAAD;AAAA,OAAcC;AAAd,MAAgCvC,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAACwC,eAAD;AAAA,OAAkBC;AAAlB,MAAwCzC,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM;AAAA,OAAC0C,aAAD;AAAA,OAAgBC;AAAhB,MAAoC3C,QAAQ,CAAC,KAAD,CAAlD;;AAEA,QAAM4C,UAAU,GAAG,YAAY;AAC7B,UAAM;AAAExB,MAAAA,KAAK,EAAEyB;AAAT,QAA8B,MAAM,CACxC,MAAMC,KAAK,CAAE,GAAExC,cAAc,CAAC,OAAD,CAAU,YAA5B,CAD6B,EAExCyC,IAFwC,EAA1C,CAD6B,CAI7B;;AACAV,IAAAA,QAAQ,CAACQ,gBAAD,CAAR;AACD,GAND,CANgC,CAchC;;;AACA5C,EAAAA,SAAS,CAAC,MAAM;AACd2C,IAAAA,UAAU;AACX,GAFQ,EAEN,CAAC,MAAD,CAFM,CAAT;;AAIA,QAAMI,YAAY,GAAG,CAAC;AAAEC,IAAAA,aAAa,EAAE;AAAEC,MAAAA;AAAF;AAAjB,GAAD,KAAkC;AACrDX,IAAAA,cAAc,CAACW,KAAD,CAAd;AACAT,IAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACD,GAHD;;AAKA,QAAMU,YAAY,GAAG,CAAC;AAAEF,IAAAA,aAAa,EAAE;AAAEC,MAAAA;AAAF;AAAjB,GAAD,KAAkC;AACrDT,IAAAA,kBAAkB,CAACS,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAME,eAAe,GAAGC,SAAS,IAAI;AACnC,UAAMC,OAAO,GAAGzB,cAAc,CAACT,KAAD,CAA9B;;AACA,QAAIkC,OAAO,CAAC9B,QAAR,CAAiB6B,SAAjB,CAAJ,EAAiC;AAC/BZ,MAAAA,kBAAkB,CAACY,SAAD,CAAlB;AACD,KAFD,MAEO;AACLV,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD;AACF,GAPD;;AASA,QAAMY,GAAG,GAAGpC,UAAU,CAACC,KAAD,CAAtB;AACA,QAAMkC,OAAO,GAAGrB,YAAY,CAACb,KAAD,EAAQkB,WAAR,CAA5B;AACA,QAAMkB,gBAAgB,GAAGtB,cAAc,CAACd,KAAD,EAAQoB,eAAR,CAAvC,CAvCgC,CAyChC;;AACA,MAAIgB,gBAAgB,IAAIA,gBAAgB,CAACC,MAAjB,KAA4B,CAAhD,IAAqDrB,IAAI,KAAK,QAAlE,EAA4E;AAC1E,UAAM,CAAC;AAAEsB,MAAAA;AAAF,KAAD,IAAaF,gBAAnB;AACAtD,IAAAA,MAAM,CAACyD,IAAP,CAAa,IAAGD,IAAK,EAArB;AACD;;AAED,SACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,OAAO,EAAEH,GADX;AAEE,IAAA,WAAW,EAAC,QAFd;AAGE,IAAA,WAAW,EAAEP,YAHf;AAIE,IAAA,KAAK,EAAEV,WAJT;AAKE,IAAA,IAAI,EAAC,IALP;AAME,IAAA,UAAU,EAAE,CAACiB,GAAG,CAACE,MANnB;AAOE,IAAA,SAAS,EAAC,oBAPZ;AAQE,IAAA,MAAM,MARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAWE,MAAC,MAAD;AACE,IAAA,OAAO,EAAEH,OADX;AAEE,IAAA,WAAW,EAAC,QAFd;AAGE,IAAA,WAAW,EAAEH,YAHf;AAIE,IAAA,KAAK,EAAEX,eAJT;AAKE,IAAA,IAAI,EAAC,QALP;AAME,IAAA,UAAU,EAAE,CAACe,GAAG,CAACE,MANnB;AAOE,IAAA,SAAS,EAAC,oBAPZ;AAQE,IAAA,MAAM,MARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,EAqBE,MAAC,QAAD;AACE,IAAA,aAAa,EAAEf,aADjB;AAEE,IAAA,SAAS,EAAEU,eAFb;AAGE,IAAA,SAAS,EAAE,CAAC,CAACG,GAAG,CAACE,MAHnB;AAIE,IAAA,gBAAgB,EAAEd,gBAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBF,CADF,EA6BE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC,CAACD,aAAF,IACC;AAAG,IAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uEAFJ,EAMG,CAAC,CAACc,gBAAgB,CAACC,MAAnB,IACC,MAAC,UAAD;AAAY,IAAA,IAAI,EAAErB,IAAlB;AAAwB,IAAA,UAAU,EAAEoB,gBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CA7BF,CADF;AA0CD,CAzFD;;AA2FArB,WAAW,CAACyB,SAAZ,GAAwB;AACtBxB,EAAAA,IAAI,EAAEjC,SAAS,CAAC0D,KAAV,CAAgB,CAAC,QAAD,EAAW,SAAX,CAAhB;AADgB,CAAxB;AAIA1B,WAAW,CAAC2B,YAAZ,GAA2B;AACzB1B,EAAAA,IAAI,EAAE;AADmB,CAA3B;AAIA,eAAeD,WAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport Router from \"next/router\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport BuscaGeo from \"./BuscaGeo\";\n\nimport { getAbsoluteUrl } from \"../../helpers/url\";\nimport Select from \"../formulario/Select\";\nimport ListaLojas from \"./ListaLojas\";\n\nconst BuscaWrapper = styled.div`\n  .erro-geo {\n    text-align: center;\n    margin: 0.5rem auto;\n    color: ${props => props.theme.client.colors.laranja};\n  }\n`;\n\nconst Inputs = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(14rem, 20rem));\n  align-items: center;\n  justify-content: center;\n  grid-gap: 1.5rem;\n  padding: 1rem 1rem;\n  .select-input {\n    background: #eaeaea;\n    width: 14rem;\n    border-radius: 5rem;\n  }\n`;\n\nconst Resultados = styled.ul``;\n\nconst compilaUfs = lojas =>\n  lojas\n    ? lojas\n        .reduce((total, { endereco }) => {\n          if (endereco && !total.includes(endereco.uf)) {\n            return [...total, endereco.uf];\n          }\n          return total;\n        }, [])\n        .sort((a, b) => (a > b ? 1 : -1))\n    : [];\n\nconst compilaCidades = lojas =>\n  lojas\n    ? lojas\n        .reduce((total, { endereco }) => {\n          if (endereco && !total.includes(endereco.cidade)) {\n            return [...total, endereco.cidade];\n          }\n          return total;\n        }, [])\n        .sort((a, b) => (a > b ? 1 : -1))\n    : [];\n\nconst lojasPorUf = (lojas, uf) =>\n  uf ? lojas.filter(({ endereco }) => endereco && endereco.uf === uf) : [];\n\nconst cidadesPorUf = (lojas, uf) =>\n  uf\n    ? lojasPorUf(lojas, uf)\n        .reduce((total, { endereco }) => {\n          if (endereco && !total.includes(endereco.cidade)) {\n            return [...total, endereco.cidade];\n          }\n          return total;\n        }, [])\n        .sort((a, b) => (a > b ? 1 : -1))\n    : [];\n\nconst lojasPorCidade = (lojas, cidade) =>\n  cidade\n    ? lojas.filter(({ endereco }) => endereco && endereco.cidade === cidade)\n    : [];\n\nconst BuscaCampos = ({ modo }) => {\n  const [lojas, setLojas] = useState([]);\n  const [ufEscolhido, setUfEscolhido] = useState(\"\");\n  const [cidadeEscolhida, setCidadeEscolhida] = useState(\"\");\n  const [erroCidadeGeo, setErroCidadeGeo] = useState(false);\n\n  const buscaLojas = async () => {\n    const { lojas: lojasEncontradas } = await (\n      await fetch(`${getAbsoluteUrl(\"front\")}/api/lojas`)\n    ).json();\n    // salva as loja\n    setLojas(lojasEncontradas);\n  };\n\n  // carregando todas as lojas\n  useEffect(() => {\n    buscaLojas();\n  }, [\"once\"]);\n\n  const handleEstado = ({ currentTarget: { value } }) => {\n    setUfEscolhido(value);\n    setCidadeEscolhida(\"\");\n  };\n\n  const handleCidade = ({ currentTarget: { value } }) => {\n    setCidadeEscolhida(value);\n  };\n\n  const handleCidadeGeo = cidadeGeo => {\n    const cidades = compilaCidades(lojas);\n    if (cidades.includes(cidadeGeo)) {\n      setCidadeEscolhida(cidadeGeo);\n    } else {\n      setErroCidadeGeo(true);\n    }\n  };\n\n  const ufs = compilaUfs(lojas);\n  const cidades = cidadesPorUf(lojas, ufEscolhido);\n  const lojasDisponiveis = lojasPorCidade(lojas, cidadeEscolhida);\n\n  // se houver somente uma loja disponivel, ja faz o redir\n  if (lojasDisponiveis && lojasDisponiveis.length === 1 && modo !== \"balcao\") {\n    const [{ path }] = lojasDisponiveis;\n    Router.push(`/${path}`);\n  }\n\n  return (\n    <BuscaWrapper>\n      <Inputs>\n        <Select\n          valores={ufs}\n          placeholder=\"Estado\"\n          handleInput={handleEstado}\n          valor={ufEscolhido}\n          nome=\"uf\"\n          carregando={!ufs.length}\n          className=\"select-input--tiny\"\n          valido\n        />\n        <Select\n          valores={cidades}\n          placeholder=\"Cidade\"\n          handleInput={handleCidade}\n          valor={cidadeEscolhida}\n          nome=\"cidade\"\n          carregando={!ufs.length}\n          className=\"select-input--tiny\"\n          valido\n        />\n        <BuscaGeo\n          erroCidadeGeo={erroCidadeGeo}\n          setCidade={handleCidadeGeo}\n          carregado={!!ufs.length}\n          setErroCidadeGeo={setErroCidadeGeo}\n        />\n      </Inputs>\n      <Resultados>\n        {!!erroCidadeGeo && (\n          <p className=\"erro-geo\">\n            Ops! Algo deu errado. Por favor, busque usando os campos acima.\n          </p>\n        )}\n        {!!lojasDisponiveis.length && (\n          <ListaLojas modo={modo} lojasLinks={lojasDisponiveis} />\n        )}\n      </Resultados>\n    </BuscaWrapper>\n  );\n};\n\nBuscaCampos.propTypes = {\n  modo: PropTypes.oneOf([\"balcao\", \"hotsite\"])\n};\n\nBuscaCampos.defaultProps = {\n  modo: \"hotsite\"\n};\n\nexport default BuscaCampos;\n"]},"metadata":{},"sourceType":"module"}