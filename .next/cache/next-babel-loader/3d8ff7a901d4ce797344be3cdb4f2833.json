{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _templateObject,\n    _this = this,\n    _jsxFileName = \"/Users/maya2/Desktop/Dev/Sites/Armazem-fit-store/site/afs-next-app/components/lojas/BuscaGeo.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport Button from '../ui/buttons/ButtonSucesso';\nimport Icon from '../ui/icons/Icon';\nimport CircleLoading from '../ui/loadings/Circle';\nvar GEO_KEY = 'AIzaSyDPo1rgn1qidv801MOtTL6Qdf_zqpKhCiM';\nvar ButtonGeo = styled(Button)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  font-size: 1.5rem;\\n  padding: 0.5rem;\\n  align-items: center;\\n  svg {\\n    margin-right: 0.5rem;\\n  }\\n\"]))); // navigator.geolocation || \"geolocation\" in navigator\n\n_c = ButtonGeo;\n\nvar BuscaGeo = function BuscaGeo(_ref) {\n  _s();\n\n  var setCidade = _ref.setCidade,\n      carregado = _ref.carregado,\n      setErroCidadeGeo = _ref.setErroCidadeGeo;\n\n  var _useState = useState('idle'),\n      status = _useState[0],\n      setStatus = _useState[1];\n\n  var transformaCoordenadas = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n      var latitude, longitude, _yield$yield$fetch$js, results, _results, formatted_address, _formatted_address$sp, _formatted_address$sp2, cidade;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              latitude = _ref2.latitude, longitude = _ref2.longitude;\n              setStatus('convertendo');\n              _context.prev = 2;\n\n              if (!(latitude && longitude)) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 6;\n              return fetch(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\".concat(latitude, \",\").concat(longitude, \"&result_type=administrative_area_level_2&key=\").concat(GEO_KEY));\n\n            case 6:\n              _context.next = 8;\n              return _context.sent.json();\n\n            case 8:\n              _yield$yield$fetch$js = _context.sent;\n              results = _yield$yield$fetch$js.results;\n\n              if (results && results.length) {\n                // o primeiro resultado eh o mais certeiro\n                _results = _slicedToArray(results, 1), formatted_address = _results[0].formatted_address; // como o result_type foi especificado, o formatted_address comeca com cidade\n\n                _formatted_address$sp = formatted_address.split('-'), _formatted_address$sp2 = _slicedToArray(_formatted_address$sp, 1), cidade = _formatted_address$sp2[0]; // enviando cidade para cima\n\n                setCidade(cidade.trim());\n              }\n\n            case 11:\n              setStatus('obtido');\n              _context.next = 17;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](2);\n              setErroCidadeGeo(true);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 14]]);\n    }));\n\n    return function transformaCoordenadas(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var pegarLocalizacao = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if ('geolocation' in navigator) {\n                setStatus('geolocalizando');\n\n                try {\n                  navigator.geolocation.getCurrentPosition(function (position) {\n                    if (position && position.coords) {\n                      transformaCoordenadas(position.coords);\n                    }\n                  });\n                } catch (error) {\n                  setErroCidadeGeo(true);\n                }\n              } else {\n                setErroCidadeGeo(true);\n              }\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function pegarLocalizacao() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(ButtonGeo, {\n    disabled: !carregado,\n    onClick: pegarLocalizacao,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, status === 'geolocalizando' || status === 'convertendo' ? __jsx(CircleLoading, {\n    tamanho: \"1.8\",\n    cor: \"#fff\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }) : __jsx(Icon, {\n    tipo: \"svg\",\n    icon: \"location\",\n    tamanho: \"1.8rem\",\n    cor: \"#fff\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }), carregado ? 'Usar minha localização' : 'Carregando...');\n};\n\n_s(BuscaGeo, \"pMVgpsUAJOHrZfHrrx/6nNCpzkc=\");\n\n_c2 = BuscaGeo;\nBuscaGeo.propTypes = {\n  setCidade: PropTypes.func.isRequired,\n  setErroCidadeGeo: PropTypes.func.isRequired,\n  carregado: PropTypes.bool.isRequired\n};\nexport default BuscaGeo;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ButtonGeo\");\n$RefreshReg$(_c2, \"BuscaGeo\");","map":{"version":3,"sources":["/Users/maya2/Desktop/Dev/Sites/Armazem-fit-store/site/afs-next-app/components/lojas/BuscaGeo.jsx"],"names":["React","useState","styled","PropTypes","Button","Icon","CircleLoading","GEO_KEY","ButtonGeo","BuscaGeo","setCidade","carregado","setErroCidadeGeo","status","setStatus","transformaCoordenadas","latitude","longitude","fetch","json","results","length","formatted_address","split","cidade","trim","pegarLocalizacao","navigator","geolocation","getCurrentPosition","position","coords","error","propTypes","func","isRequired","bool"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport Button from '../ui/buttons/ButtonSucesso';\nimport Icon from '../ui/icons/Icon';\nimport CircleLoading from '../ui/loadings/Circle';\n\nconst GEO_KEY = 'AIzaSyDPo1rgn1qidv801MOtTL6Qdf_zqpKhCiM';\n\nconst ButtonGeo = styled(Button)`\n  font-size: 1.5rem;\n  padding: 0.5rem;\n  align-items: center;\n  svg {\n    margin-right: 0.5rem;\n  }\n`;\n\n// navigator.geolocation || \"geolocation\" in navigator\n\nconst BuscaGeo = ({ setCidade, carregado, setErroCidadeGeo }) => {\n  const [status, setStatus] = useState('idle');\n\n  const transformaCoordenadas = async ({ latitude, longitude }) => {\n    setStatus('convertendo');\n    try {\n      if (latitude && longitude) {\n        const { results } = await (await fetch(\n          `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=administrative_area_level_2&key=${GEO_KEY}`,\n        )).json();\n        if (results && results.length) {\n          // o primeiro resultado eh o mais certeiro\n          const [{ formatted_address }] = results;\n          // como o result_type foi especificado, o formatted_address comeca com cidade\n          const [cidade] = formatted_address.split('-');\n          // enviando cidade para cima\n          setCidade(cidade.trim());\n        }\n      }\n      setStatus('obtido');\n    } catch (error) {\n      setErroCidadeGeo(true);\n    }\n  };\n\n  const pegarLocalizacao = async () => {\n    if ('geolocation' in navigator) {\n      setStatus('geolocalizando');\n      try {\n        navigator.geolocation.getCurrentPosition((position) => {\n          if (position && position.coords) {\n            transformaCoordenadas(position.coords);\n          }\n        });\n      } catch (error) {\n        setErroCidadeGeo(true);\n      }\n    } else {\n      setErroCidadeGeo(true);\n    }\n  };\n\n  return (\n    <ButtonGeo disabled={!carregado} onClick={pegarLocalizacao}>\n      {status === 'geolocalizando' || status === 'convertendo' ? (\n        <CircleLoading tamanho=\"1.8\" cor=\"#fff\" />\n      ) : (\n        <Icon tipo=\"svg\" icon=\"location\" tamanho=\"1.8rem\" cor=\"#fff\" />\n      )}\n      {carregado ? 'Usar minha localização' : 'Carregando...'}\n    </ButtonGeo>\n  );\n};\n\nBuscaGeo.propTypes = {\n  setCidade: PropTypes.func.isRequired,\n  setErroCidadeGeo: PropTypes.func.isRequired,\n  carregado: PropTypes.bool.isRequired,\n};\n\nexport default BuscaGeo;\n"]},"metadata":{},"sourceType":"module"}